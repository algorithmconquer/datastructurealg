一、4点
递归+记忆化==>递推
状态定义:opt[n], dp[n], fib[n];
状态方程:opt[n] = best_of(opt[n-1], opt[n-2], ...)
最优子结构
二、举例：斐波那契数列：0,1,1,2,3,5,8,13,21,...
递推公式:F[n] = F[n-1] + F[n-2];
伪代码:
int fib(int n):
	if(n<=0){
		return 0;
	}
	else if(n==1){
		return 1;
	}
	else{
		return fib(n-1)+fib(n-2)
	}
使用三目表达式:
int fib(int n):
	return n<=1?n:fib(n-1)+fib(n-2)
fib[6] = fib[5]+fib[4]=(fib[4]+fib[3])+(fib[3]+fib[2])=(fib[3]+fib[2]+fib[2]+fib[1])+(fib[2]+fib[1]+fib[1]+fib[0])=...
存在重复计算，时间复杂度：O(2^n)
优化:--记忆化
int fib(int n, int[] mem):
	if(n<=0){
		return 0;
	}
	else if(n==1){
		return 1;
	}
	else if(mem[n]==Null or mem[n]==0){
		mem[n] = fib(n-1, mem) + fib(n-2, mem);
	}
时间复杂度：O(n)
三、递推
递推公式:F[n] = F[n-1] + F[n-2];
F[0]=0,F[1]=1;
for(int i=2; i<=n; i++){
	Fib[i] = Fib[i-1] + Fib[i-2];
}


